#!/bin/bash

#
# Environment variables required by Terraform 
# to bootstrap and install the PCF environment
#

#
# Externalized Variables
#

#export TF_VAR_trace=true
#export TF_VAR_unpause_deployment_pipeline=true
#export TF_VAR_set_start_stop_schedule=false

#
# vCenter IaaS Environment
#

export TF_VAR_vsphere_server="$VSPHERE_SERVER"
export TF_VAR_vsphere_user="$VSPHERE_USER"
export TF_VAR_vsphere_password="$VSPHERE_PASSWORD"
export TF_VAR_vsphere_allow_unverified_ssl="$VSPHERE_ALLOW_UNVERIFIED_SSL"
export TF_VAR_vcenter_datacenter='Datacenter'

# Comma separated list of availability zone clusters

export TF_VAR_vcenter_clusters='Cluster'

# Comma separated list of ephemeral data stores

export TF_VAR_vcenter_ephemeral_datastores='LUN01'

# Comma separated list of persistent data stores

export TF_VAR_vcenter_persistant_datastores='LUN01'

# VCenter Networks

export TF_VAR_dmz_network=
export TF_VAR_dmz_network_cidr=
export TF_VAR_dmz_network_gateway=
export TF_VAR_admin_network='VM Network'
export TF_VAR_admin_network_cidr='10.193.237.0/24'
export TF_VAR_admin_network_gateway='10.193.237.1'

#
# Terraform state attributes
#

export TF_VAR_s3_access_key_id=$AWS_ACCESS_KEY
export TF_VAR_s3_secret_access_key=$AWS_SECRET_KEY
export TF_VAR_s3_default_region=$AWS_DEFAULT_REGION
#export TF_VAR_terraform_state_s3_endpoint=
export TF_VAR_terraform_state_bucket=tfstate-eu-central-1

#
# Certificate Subject data for certificate creation
#

#export TF_VAR_company_name=Pivotal Services
#export TF_VAR_organization_name=PSO EMEA
#export TF_VAR_locality=Dubai
#export TF_VAR_province=Dubayy
#export TF_VAR_country=AE

#
# VPC configuration
#

export TF_VAR_vpc_name=pcf-demo-3
#export TF_VAR_max_azs=1
export TF_VAR_vpc_dns_zone=demo3.pocs.pcfs.io
export TF_VAR_vpc_cidr='10.193.237.0/24'

#
# Bastion inception instance variables
#

#export TF_VAR_bastion_instance_memory=4096
#export TF_VAR_bastion_instance_cpus=2
#export TF_VAR_bastion_root_disk_size=50
export TF_VAR_bastion_data_disk_size=300

# IP for Bastion NIC on DMZ network segment. 
# Defaults to 31st IP of DMZ network's CIDR
# if value is empty.

export TF_VAR_bastion_dmz_ip=

# IP for Bastion NIC on Admin network segment. 
# Defaults to 31st IP of DMZ network's CIDR
# if value is empty.

export TF_VAR_bastion_admin_ip=

#
# Bastion access configuration
#

#export TF_VAR_bastion_host_name=bastion
#export TF_VAR_bastion_admin_ssh_port=22

# This needs to be a name other than 'root' or 'admin' otherwise 
# the user setup on the bastion will fail and you will be unable 
# to login to the instance.

export TF_VAR_bastion_admin_user=bastion-admin
export TF_VAR_bastion_setup_vpn=false
#export TF_VAR_bastion_vpn_port=2295
#export TF_VAR_bastion_vpn_protocol=udp
#export TF_VAR_bastion_vpn_network=192.168.111.0/24
export TF_VAR_bastion_allow_public_ssh=true

#
# VPC SMTP Server Relay
#

export TF_VAR_smtp_relay_host=smtp.sendgrid.net
export TF_VAR_smtp_relay_port=2525
export TF_VAR_smtp_relay_api_key=$SENDGRID_API_KEY

# Email to forward notifications to

export TF_VAR_notification_email=msamaratunga@pivotal.io

#
# Local file path to write SSH private key for bastion instance
#

#export TF_VAR_ssh_key_file_path=/Users/msamaratunga/Work/pivotal/pcf-environments/.workspace/pcf-demo-3

#
# Jumpbox
#

#export TF_VAR_deploy_jumpbox=false
#export TF_VAR_jumpbox_data_disk_size=160

#
# Concourse Automation common attributes
#
#
# Cloud Automation Pipelines (CAPs) repository
#

#export TF_VAR_automation_pipelines_repo=https://github.com/mevansam/caps.git
#export TF_VAR_automation_pipelines_branch=master

#
# Environment configuration repository
#

export TF_VAR_env_config_repo=https://github.com/mevansam/pcf-environments.git
export TF_VAR_env_config_repo_branch=master
export TF_VAR_env_config_path=pcf-demo-4/config

#
# Automation extensions git repository
#

export TF_VAR_automation_extensions_repo=https://github.com/mevansam/pcf-environments.git
export TF_VAR_automation_extensions_repo_branch=master

# Path to terraform template overrides in the 'automation extensions' 
# repository for creating PCF PAS infrastructure.

export TF_VAR_pcf_terraform_templates_path=pcf-demo-3/templates/terraform

# Path to json template overrides in the 'automation extensions' 
# repository for configuring PCF tiles. This folder should have 
# folders named by the tile name as provided in the 'products' 
# variable below.

export TF_VAR_pcf_tile_templates_path=pcf-demo-3/templates/tile

# The list of PCF environments to deploy.

#export TF_VAR_pcf_environments='["sandbox"]'

# Network configuration for each Ops Manager instance within
# each environment. Each configuration should be a map of
# "vcenter_network_name", "network_cidr", "network_gateway" 
# and "ip"

export TF_VAR_pcf_ops_manager_network='{
  sandbox = {
    vcenter_network_name = "VM Network"
    network_cidr         = "10.193.237.0/24"
    network_gateway      = "10.193.237.1"
    ip                   = "10.193.237.32"
  }
}'

# The PCF logical networks to create. The order in which subnets 
# should be configured are provided via the 'subnet_config_order'
# key. If you need to add subnets always add to the end of this 
# list. Otherwise any reordering will result in networks being 
# recreated and may have undesired outcomes.

export TF_VAR_pcf_networks='{
  sandbox = {
    service_networks    = "services,dynamic-services"
    subnet_config_order = "infrastructure,pas-1,services-1,dynamic-services-1"
  }
}'

# The CIDRs of the PCF Networks subnets. The range 192.168.0.0/22 
# is reserved for bootstrap services and should not be used for PCF 
# environments.  Multiple subnets must post-fix the network name 
# with '-#' for each subnet. Subnets are additive once they have 
# been created. Each subnet configuration should be a map of
# "vcenter_network_name", "network_cidr" and "reserved_ip_ranges"
# used to declare the logical Bosh networks.
#
# For example:
#
# {
#   sandbox = {
#     infrastructure = {
#       vcenter_network_name = "VM Network"
#       network_cidr         = "10.193.237.0/24"
#       reserved_ip_ranges     = "10.193.237.1-10.193.237.32,10.193.237.40-10.193.237.254"
#     }
#     pas-1 = {
#       vcenter_network_name = "VM Network"
#       network_cidr         = "10.193.237.0/24"
#       reserved_ip_ranges     = "10.193.237.1-10.193.237.39,10.193.237.70-10.193.237.254"
#     }
#     services-1 = {
#       vcenter_network_name = "VM Network"
#       network_cidr         = "10.193.237.0/24"
#       reserved_ip_ranges     = "10.193.237.1-10.193.237.69,10.193.237.100-10.193.237.254"
#     }
#     dynamic-services-1 = {
#       vcenter_network_name = "VM Network"
#       network_cidr         = "10.193.237.0/24"
#       reserved_ip_ranges     = "10.193.237.1-10.193.237.99,10.193.237.150-10.193.237.254"
#     }
#   }
# }'

export TF_VAR_pcf_network_subnets='{
  sandbox = {
    infrastructure = {
      vcenter_network_name = "VM Network"
      network_cidr         = "10.193.237.0/24"
      network_gateway      = "10.193.237.1"
      reserved_ip_ranges   = "10.193.237.1-10.193.237.32,10.193.237.40-10.193.237.254"
    }
    pas-1 = {
      vcenter_network_name = "VM Network"
      network_cidr         = "10.193.237.0/24"
      network_gateway      = "10.193.237.1"
      reserved_ip_ranges   = "10.193.237.1-10.193.237.39,10.193.237.70-10.193.237.254"
    }
    services-1 = {
      vcenter_network_name = "VM Network"
      network_cidr         = "10.193.237.0/24"
      network_gateway      = "10.193.237.1"
      reserved_ip_ranges   = "10.193.237.1-10.193.237.69,10.193.237.100-10.193.237.254"
    }
    dynamic-services-1 = {
      vcenter_network_name = "VM Network"
      network_cidr         = "10.193.237.0/24"
      network_gateway      = "10.193.237.1"
      reserved_ip_ranges   = "10.193.237.1-10.193.237.99,10.193.237.150-10.193.237.254"
    }
  }
}'

#
# PCF Install params
#

export TF_VAR_pivnet_token=$PIVNET_TOKEN
